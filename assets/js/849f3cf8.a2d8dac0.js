"use strict";(self.webpackChunkhamster_docs=self.webpackChunkhamster_docs||[]).push([[650],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),f=i,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||o;return t?r.createElement(d,a(a({ref:n},p),{},{components:t})):r.createElement(d,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const o={sidebar_position:2},a="Pipeline Syntax",s={unversionedId:"AlineCI/syntax",id:"AlineCI/syntax",title:"Pipeline Syntax",description:"Learn how to write a pipeline based on this case.",source:"@site/docs/AlineCI/syntax.md",sourceDirName:"AlineCI",slug:"/AlineCI/syntax",permalink:"/docs/AlineCI/syntax",draft:!1,editUrl:"https://github.com/hamster-shared/gitbook/blob/main/docs/AlineCI/syntax.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Overview",permalink:"/docs/AlineCI/overview"},next:{title:"ALine CI Action Plugins",permalink:"/docs/AlineCI/plugins"}},l={},c=[{value:"Follow Example",id:"follow-example",level:2}],p={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pipeline-syntax"},"Pipeline Syntax"),(0,i.kt)("p",null,"Learn how to write a pipeline based on this case."),(0,i.kt)("h2",{id:"follow-example"},"Follow Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"version: 1.0                  # pipeline file version. now is 1.0\nname: example                 # pipeline name\nstages:                       # define pipeline stages\n  git-clone:                  # stage name\n    steps:                    # define steps in stage\n      - name: git-clone       # step name. You can define multiple step in stages.\n        uses: git-checkout    # step action\n        with:                 # step action arguments\n          url: https://github.com/mohaijiang/truffle-MetaCoin.git # here use git-checkout action, this action requires two argument what is url and branch \n          branch: main        # git-checkout action arguments:  branch . Different action needs different argument.\n          \n  code-compile:               # stage name\n    needs:                    # stage dependency\n      - git-clone             # The necessary stage before the implementation of this stage\n    steps:                    # define steps in stage\n      - name: code-compile    # step name. You can define multiple step in stages.\n        runs-on: node:16      # runs-on\uff1a define run environment in step\n        uses: shell           # use: use action. This is example is shell action. You can learn more about actions in the following chapters.\n        run: |                # run: shell action execute command definition. You can write command in one line or use `|` symbol to write with multi lines\n          npm install -g truffle    \n          truffle compile\n\n")))}u.isMDXComponent=!0}}]);