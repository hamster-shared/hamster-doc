"use strict";(self.webpackChunkhamster_docs=self.webpackChunkhamster_docs||[]).push([[681],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),h=r,d=m["".concat(s,".").concat(h)]||m[h]||p[h]||l;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4886:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:3},i="ALine CI Action Plugins",o={unversionedId:"AlineCI/plugins",id:"AlineCI/plugins",title:"ALine CI Action Plugins",description:"Introduce some plugins of ALine CI.",source:"@site/docs/AlineCI/plugins.md",sourceDirName:"AlineCI",slug:"/AlineCI/plugins",permalink:"/docs/AlineCI/plugins",draft:!1,editUrl:"https://github.com/hamster-shared/gitbook/blob/main/docs/AlineCI/plugins.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Pipeline Syntax",permalink:"/docs/AlineCI/syntax"},next:{title:"Release Note",permalink:"/docs/category/release-note"}},s={},c=[{value:"Plugins",id:"plugins",level:2},{value:"git",id:"git",level:3},{value:"workdir",id:"workdir",level:3},{value:"shell",id:"shell",level:3},{value:"hamster-artifactory",id:"hamster-artifactory",level:3},{value:"remote action",id:"remote-action",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"aline-ci-action-plugins"},"ALine CI Action Plugins"),(0,r.kt)("p",null,"Introduce some plugins of ALine CI."),(0,r.kt)("p",null,"ALine CI provides some built-in plugins. You can use these action plugin to build your own pipeline."),(0,r.kt)("h2",{id:"plugins"},"Plugins"),(0,r.kt)("h3",{id:"git"},"git"),(0,r.kt)("p",null,"git action is used to clone repository . "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"name: git-checkout"),(0,r.kt)("li",{parentName:"ul"},"with:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"url:  git repository url"),(0,r.kt)("li",{parentName:"ul"},"branch:  the branch or tag that want to checkout "))),(0,r.kt)("li",{parentName:"ul"},"example:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"     - name: <some-name>\n       uses: git-checkout\n       with:\n         url: https://github.com/mohaijiang/truffle-MetaCoin.git\n         branch: main\n")))),(0,r.kt)("h3",{id:"workdir"},"workdir"),(0,r.kt)("p",null,"workdir action can set pipeline workdir and then the following commands can be run in this directory."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"name: workdir"),(0,r.kt)("li",{parentName:"ul"},"with:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"workdir: the directory path. "))),(0,r.kt)("li",{parentName:"ul"},"example:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"     - name: <some-name>\n       uses: workdir\n       with:\n         workdir: /Users/ubuntu/workspace/aline\n")))),(0,r.kt)("h3",{id:"shell"},"shell"),(0,r.kt)("p",null,"shell action is the most basic action, you can write shell script to build \u3001compile or do anything ."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"name: shell"),(0,r.kt)("li",{parentName:"ul"},"run: the shell script you want to execute"),(0,r.kt)("li",{parentName:"ul"},"runs-on: docker image name, provider docker environment that shell command need"),(0,r.kt)("li",{parentName:"ul"},"example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'      - name: <some-name>\n        run: |\n          echo "hello"\n          node -v\n')),(0,r.kt)("h3",{id:"hamster-artifactory"},"hamster-artifactory"),(0,r.kt)("p",null,"hamster-artifactory action can compress and store build achievement , that you can get the achievement without workspaces status."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"name: hamster-artifactory"),(0,r.kt)("li",{parentName:"ul"},"with: ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"name: the achievement name that compressed."),(0,r.kt)("li",{parentName:"ul"},"compress: (optional) default is ture. if true ,the action will compress the files that defined in path arguments.\nif false ,will not compress and directory store."),(0,r.kt)("li",{parentName:"ul"},"path: the target that you want to archive . the path argument can receive wildcard path."))),(0,r.kt)("li",{parentName:"ul"},"example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"      - name: save artifactory\n        uses: hamster-artifactory\n        with:\n          name: some.zip\n          compress: true\n          path: |\n            target/*.jar\n            target/maven-status\n            target/*/*/*/*/*.lst\n            src/*/java\n")),(0,r.kt)("h3",{id:"remote-action"},"remote action"),(0,r.kt)("p",null,"In order to enhance the extensibility of pipeline, we allow users to define their own action plug-ins to enhance the function of pipeline.\nYou can get an example from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mohaijiang/hello-world-action.git"},"here"),". It is very similar to the Github Action."),(0,r.kt)("p",null,"remote action needs an ",(0,r.kt)("inlineCode",{parentName:"p"},"action.yml"),", that defines how to do and what to do. It is a yaml format file. Let's show the syntax ."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title='hello-world-action/action.yml'",title:"'hello-world-action/action.yml'"},"name: 'simple hello world'\ndescription: 'Executing shell commands'\nauthor: 'mohaijiang'\ninputs:\n  name:\n    description: 'world'\n    default: 'world'\n    required: false\nruns:\n  using: 'composite'\n  steps:\n    - run: hello.sh\n      shell: bash\n    - run: echo WORLD\n      shell: bash\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:"title='hello-world-action/hello.sh'",title:"'hello-world-action/hello.sh'"},'echo "hello"\n')),(0,r.kt)("p",null,"Now we can use this action, Here is pipeline file example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title='remote-action-pipeline.yml'",title:"'remote-action-pipeline.yml'"},"version: 1.0\nname: remote-action\nstages:\n  remote-action:\n    steps:\n      - name: remote hello world action\n        uses: mohaijiang/hello-world-action           # github repository   <namespace>/<repositoryName>\n        with:                                         # your action args\n          name: aline                                 # this the argument defined in action.yml\n\n")),(0,r.kt)("p",null,"Now you can execute this pipeline file and get result like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"aline --file remote-action-pipeline.yml\n\n2023-01-16 10:59:41 [INFO] [executor.go:138] stage: {\n2023-01-16 10:59:41 [INFO] [executor.go:139]    // remote-action\n....\n....\n\nhello\n\naline\n\n...\n...\n\n")))}p.isMDXComponent=!0}}]);